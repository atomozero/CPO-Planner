# Generated by Django 4.2.9 on 2025-03-05 20:22

import cpo_planner.projects.models.document
from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ChargingStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome Stazione')),
                ('identifier', models.CharField(max_length=50, unique=True, verbose_name='Identificatore Stazione')),
                ('address', models.CharField(max_length=255, verbose_name='Indirizzo')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Latitudine')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Longitudine')),
                ('power_type', models.CharField(choices=[('ac', 'AC'), ('dc', 'DC'), ('ac_dc', 'AC/DC')], default='ac', max_length=10, verbose_name='Tipo di Potenza')),
                ('charging_points', models.PositiveIntegerField(default=1, verbose_name='Punti di Ricarica')),
                ('total_power', models.DecimalField(decimal_places=2, help_text='kW', max_digits=8, verbose_name='Potenza Totale')),
                ('station_cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Costo Colonnina')),
                ('installation_cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Costo Installazione')),
                ('connection_cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Costo Allaccio')),
                ('design_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Costo Progettazione')),
                ('permit_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Costo Permessi')),
                ('energy_cost_kwh', models.DecimalField(decimal_places=4, max_digits=6, verbose_name='Costo Energia (€/kWh)')),
                ('charging_price_kwh', models.DecimalField(decimal_places=4, max_digits=6, verbose_name='Prezzo Ricarica (€/kWh)')),
                ('estimated_sessions_day', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Sessioni Stimate/Giorno')),
                ('avg_kwh_session', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Media kWh/Sessione')),
                ('installation_date', models.DateField(blank=True, null=True, verbose_name='Data Installazione')),
                ('status', models.CharField(choices=[('planned', 'Pianificata'), ('active', 'Attiva'), ('maintenance', 'Manutenzione'), ('inactive', 'Inattiva')], default='planned', max_length=20, verbose_name='Stato Stazione')),
                ('has_photovoltaic_system', models.BooleanField(default=False, verbose_name='Impianto Fotovoltaico')),
                ('photovoltaic_capacity', models.DecimalField(blank=True, decimal_places=2, help_text='kWp', max_digits=8, null=True, verbose_name='Capacità Fotovoltaico')),
            ],
            options={
                'verbose_name': 'Stazione di Ricarica',
                'verbose_name_plural': 'Stazioni di Ricarica',
            },
        ),
        migrations.CreateModel(
            name='EnergyContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome Contratto')),
                ('provider', models.CharField(max_length=100, verbose_name='Fornitore')),
                ('contract_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Numero Contratto')),
                ('start_date', models.DateField(verbose_name='Data Inizio')),
                ('end_date', models.DateField(verbose_name='Data Fine')),
                ('tariff_type', models.CharField(choices=[('fixed', 'Tariffa Fissa'), ('time_bands', 'Fasce Orarie'), ('peak_off_peak', 'Picco/Fuori Picco'), ('variable', 'Variabile')], max_length=20, verbose_name='Tipo Tariffa')),
                ('energy_price_kwh', models.DecimalField(decimal_places=4, max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Prezzo Energia (€/kWh)')),
                ('energy_price_f1', models.DecimalField(blank=True, decimal_places=4, help_text='Prezzo fascia F1 (lun-ven 8-19)', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Prezzo F1 (€/kWh)')),
                ('energy_price_f2', models.DecimalField(blank=True, decimal_places=4, help_text='Prezzo fascia F2 (lun-ven 7-8, 19-23, sab 7-23)', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Prezzo F2 (€/kWh)')),
                ('energy_price_f3', models.DecimalField(blank=True, decimal_places=4, help_text='Prezzo fascia F3 (lun-sab 23-7, dom e festivi)', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Prezzo F3 (€/kWh)')),
                ('fixed_monthly_cost', models.DecimalField(decimal_places=2, default=0, max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Costo Fisso Mensile (€)')),
                ('power_cost_kw', models.DecimalField(decimal_places=2, default=0, help_text='Costo mensile per kW di potenza impegnata', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Costo Potenza (€/kW/mese)')),
                ('annual_adjustment', models.DecimalField(decimal_places=2, default=0, help_text='Percentuale di adeguamento annuale del prezzo', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Adeguamento Annuo (%)')),
                ('max_power', models.DecimalField(decimal_places=2, help_text='Potenza massima contrattuale', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Potenza Massima (kW)')),
                ('has_penalties', models.BooleanField(default=False, verbose_name='Prevede Penali')),
                ('penalties_description', models.TextField(blank=True, null=True, verbose_name='Descrizione Penali')),
                ('contract_file', models.FileField(blank=True, null=True, upload_to='contracts/', verbose_name='File Contratto')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Note')),
            ],
            options={
                'verbose_name': 'Contratto Energia',
                'verbose_name_plural': 'Contratti Energia',
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome Comune')),
                ('province', models.CharField(max_length=50, verbose_name='Provincia')),
                ('region', models.CharField(max_length=50, verbose_name='Regione')),
            ],
            options={
                'verbose_name': 'Comune',
                'verbose_name_plural': 'Comuni',
                'unique_together': {('name', 'province')},
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome Progetto')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descrizione')),
                ('region', models.CharField(max_length=100, verbose_name='Regione')),
                ('start_date', models.DateField(verbose_name='Data Inizio Progetto')),
                ('expected_completion_date', models.DateField(verbose_name='Data Prevista Completamento')),
                ('total_budget', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Budget Totale')),
                ('total_expected_revenue', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Ricavi Attesi Totali')),
                ('total_roi', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('-99.99')), django.core.validators.MaxValueValidator(Decimal('9999.99'))], verbose_name='ROI Totale')),
                ('status', models.CharField(choices=[('planning', 'Pianificazione'), ('in_progress', 'In Corso'), ('completed', 'Completato'), ('suspended', 'Sospeso')], default='planning', max_length=20, verbose_name='Stato Progetto')),
                ('photovoltaic_integration', models.BooleanField(default=False, verbose_name='Integrazione Fotovoltaico')),
            ],
            options={
                'verbose_name': 'Progetto',
                'verbose_name_plural': 'Progetti',
            },
        ),
        migrations.CreateModel(
            name='SubProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome Sotto-Progetto')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descrizione')),
                ('start_date', models.DateField(verbose_name='Data Inizio')),
                ('expected_completion_date', models.DateField(verbose_name='Data Prevista Completamento')),
                ('budget', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Budget')),
                ('expected_revenue', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Ricavi Attesi')),
                ('roi', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('-99.99')), django.core.validators.MaxValueValidator(Decimal('9999.99'))], verbose_name='ROI')),
                ('status', models.CharField(choices=[('planning', 'Pianificazione'), ('in_progress', 'In Corso'), ('completed', 'Completato'), ('suspended', 'Sospeso')], default='planning', max_length=20, verbose_name='Stato Sotto-Progetto')),
                ('municipality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.municipality', verbose_name='Comune')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.project', verbose_name='Progetto Principale')),
            ],
            options={
                'verbose_name': 'Sotto-Progetto',
                'verbose_name_plural': 'Sotto-Progetti',
            },
        ),
        migrations.CreateModel(
            name='StationTimeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('design_start', models.DateField(verbose_name='Inizio Progettazione')),
                ('design_end', models.DateField(verbose_name='Fine Progettazione')),
                ('permit_application_date', models.DateField(verbose_name='Data Richiesta Permessi')),
                ('permit_approval_date', models.DateField(blank=True, null=True, verbose_name='Data Approvazione Permessi')),
                ('equipment_order_date', models.DateField(verbose_name='Data Ordine Apparecchiature')),
                ('equipment_delivery_date', models.DateField(blank=True, null=True, verbose_name='Data Consegna Apparecchiature')),
                ('site_preparation_start', models.DateField(verbose_name='Inizio Preparazione Sito')),
                ('site_preparation_end', models.DateField(verbose_name='Fine Preparazione Sito')),
                ('installation_start', models.DateField(verbose_name='Inizio Installazione')),
                ('installation_end', models.DateField(verbose_name='Fine Installazione')),
                ('grid_connection_date', models.DateField(verbose_name='Data Connessione Rete')),
                ('testing_date', models.DateField(verbose_name='Data Test')),
                ('commissioning_date', models.DateField(verbose_name='Data Messa in Servizio')),
                ('status_notes', models.TextField(blank=True, null=True, verbose_name='Note Stato')),
                ('charging_station', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='timeline', to='projects.chargingstation', verbose_name='Stazione di Ricarica')),
            ],
            options={
                'verbose_name': 'Cronoprogramma Stazione',
                'verbose_name_plural': 'Cronoprogrammi Stazioni',
            },
        ),
        migrations.CreateModel(
            name='StationDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titolo')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descrizione')),
                ('document_type', models.CharField(choices=[('technical_specs', 'Specifiche Tecniche'), ('installation_manual', 'Manuale Installazione'), ('maintenance_manual', 'Manuale Manutenzione'), ('wiring_diagram', 'Schema Elettrico'), ('site_plan', 'Planimetria'), ('permit', 'Permesso'), ('inspection_report', 'Rapporto Ispezione'), ('test_report', 'Rapporto Test'), ('warranty', 'Garanzia'), ('other', 'Altro')], max_length=30, verbose_name='Tipo Documento')),
                ('file', models.FileField(upload_to=cpo_planner.projects.models.document.station_document_path, verbose_name='File')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data creazione')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data aggiornamento')),
                ('charging_station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='projects.chargingstation', verbose_name='Stazione di Ricarica')),
            ],
            options={
                'verbose_name': 'Documento Stazione',
                'verbose_name_plural': 'Documenti Stazione',
            },
        ),
        migrations.CreateModel(
            name='ProjectTimeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planning_start', models.DateField(verbose_name='Inizio Pianificazione')),
                ('planning_end', models.DateField(verbose_name='Fine Pianificazione')),
                ('permitting_start', models.DateField(verbose_name='Inizio Richiesta Permessi')),
                ('permitting_end', models.DateField(verbose_name='Fine Richiesta Permessi')),
                ('procurement_start', models.DateField(verbose_name='Inizio Approvvigionamento')),
                ('procurement_end', models.DateField(verbose_name='Fine Approvvigionamento')),
                ('installation_start', models.DateField(verbose_name='Inizio Installazione')),
                ('installation_end', models.DateField(verbose_name='Fine Installazione')),
                ('testing_start', models.DateField(verbose_name='Inizio Test')),
                ('testing_end', models.DateField(verbose_name='Fine Test')),
                ('operation_start', models.DateField(verbose_name='Inizio Operatività')),
                ('timeline_notes', models.TextField(blank=True, null=True, verbose_name='Note Cronoprogramma')),
                ('critical_milestones', models.JSONField(default=list, verbose_name='Milestone Critiche')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='timeline', to='projects.project', verbose_name='Progetto')),
            ],
            options={
                'verbose_name': 'Cronoprogramma Progetto',
                'verbose_name_plural': 'Cronoprogrammi Progetti',
            },
        ),
        migrations.CreateModel(
            name='ProjectEnergyContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Data Inizio Utilizzo')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Data Fine Utilizzo')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('energy_contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.energycontract', verbose_name='Contratto Energia')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.project', verbose_name='Progetto')),
            ],
            options={
                'verbose_name': 'Associazione Progetto-Contratto',
                'verbose_name_plural': 'Associazioni Progetto-Contratto',
                'unique_together': {('project', 'energy_contract', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='ProjectDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titolo')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descrizione')),
                ('document_type', models.CharField(choices=[('business_plan', 'Business Plan'), ('financial_analysis', 'Analisi Finanziaria'), ('project_timeline', 'Cronoprogramma'), ('contract', 'Contratto'), ('permit', 'Permesso'), ('technical_specs', 'Specifiche Tecniche'), ('environmental_impact', 'Impatto Ambientale'), ('municipality_docs', 'Documentazione Comune'), ('other', 'Altro')], max_length=30, verbose_name='Tipo Documento')),
                ('file', models.FileField(upload_to=cpo_planner.projects.models.document.project_document_path, verbose_name='File')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data creazione')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data aggiornamento')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='projects.project', verbose_name='Progetto')),
            ],
            options={
                'verbose_name': 'Documento Progetto',
                'verbose_name_plural': 'Documenti Progetto',
            },
        ),
        migrations.CreateModel(
            name='PhotovoltaicSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.DecimalField(decimal_places=2, help_text='kWp (kilowatt picco)', max_digits=8, validators=[django.core.validators.MinValueValidator(0.1)], verbose_name='Capacità installata')),
                ('panel_type', models.CharField(choices=[('monocrystalline', 'Monocristallino'), ('polycrystalline', 'Policristallino'), ('thin_film', 'Film sottile'), ('bifacial', 'Bifacciale')], default='monocrystalline', max_length=20, verbose_name='Tipo di pannelli')),
                ('total_area', models.DecimalField(decimal_places=2, help_text='m²', max_digits=8, validators=[django.core.validators.MinValueValidator(0.1)], verbose_name='Superficie totale')),
                ('number_of_panels', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Numero di pannelli')),
                ('installation_cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Costo installazione')),
                ('inverter_cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Costo inverter')),
                ('additional_equipment_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Costo equipaggiamento aggiuntivo')),
                ('expected_annual_production', models.DecimalField(decimal_places=2, help_text='kWh/anno', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Produzione annuale stimata')),
                ('efficiency_loss_year', models.DecimalField(decimal_places=2, default=0.5, help_text='% di perdita di efficienza per anno', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Perdita efficienza annuale')),
                ('incentive_percentage', models.DecimalField(decimal_places=2, default=0, help_text='% del costo totale coperto da incentivi', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Percentuale incentivi')),
                ('energy_sale_price', models.DecimalField(decimal_places=4, default=0, help_text='€/kWh per energia immessa in rete', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Prezzo vendita energia in eccesso')),
                ('installation_date', models.DateField(verbose_name='Data installazione')),
                ('expected_lifespan', models.PositiveIntegerField(default=25, help_text='anni', verbose_name='Vita utile prevista')),
                ('charging_station', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='photovoltaic_system', to='projects.chargingstation', verbose_name='Stazione di Ricarica')),
            ],
            options={
                'verbose_name': 'Impianto Fotovoltaico',
                'verbose_name_plural': 'Impianti Fotovoltaici',
            },
        ),
        migrations.CreateModel(
            name='FinancialParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('investment_years', models.PositiveIntegerField(default=10, help_text="Durata dell'investimento in anni", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)], verbose_name='Durata investimento (anni)')),
                ('loan_amount', models.DecimalField(decimal_places=2, default=0, help_text='Importo del prestito in €', max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Importo prestito')),
                ('loan_interest_rate', models.DecimalField(decimal_places=2, default=5.0, help_text='Tasso di interesse annuale del prestito in %', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='Tasso interesse prestito')),
                ('loan_term', models.PositiveIntegerField(default=10, help_text='Durata del prestito in anni', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)], verbose_name='Durata prestito (anni)')),
                ('pre_amortization_years', models.PositiveIntegerField(default=0, help_text='Anni di preammortamento del prestito (opzionale)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Anni preammortamento')),
                ('market_growth_rate', models.DecimalField(decimal_places=2, default=20.0, help_text='Tasso di crescita annuale del mercato EV in %', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Tasso crescita mercato EV')),
                ('inflation_rate', models.DecimalField(decimal_places=2, default=2.0, help_text='Tasso di inflazione annuale in %', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Tasso inflazione')),
                ('maintenance_cost_percentage', models.DecimalField(decimal_places=2, default=5.0, help_text="Costo di manutenzione annuale come % dell'investimento iniziale", max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)], verbose_name='Costo manutenzione %')),
                ('energy_price_increase_rate', models.DecimalField(decimal_places=2, default=3.0, help_text="Tasso di aumento annuale del prezzo dell'energia in %", max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Aumento annuo prezzo energia')),
                ('charging_price_increase_rate', models.DecimalField(decimal_places=2, default=1.5, help_text='Tasso di aumento annuale del prezzo di ricarica in %', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Aumento annuo prezzo ricarica')),
                ('failure_probability', models.DecimalField(decimal_places=2, default=1.0, help_text='Probabilità annuale di guasto di una colonnina in %', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='Probabilità guasto annuale')),
                ('repair_cost_percentage', models.DecimalField(decimal_places=2, default=10.0, help_text='Costo medio di riparazione come % del costo della colonnina', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Costo riparazione %')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data creazione')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data aggiornamento')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='financial_parameters', to='projects.project', verbose_name='Progetto')),
            ],
            options={
                'verbose_name': 'Parametri finanziari',
                'verbose_name_plural': 'Parametri finanziari',
            },
        ),
        migrations.CreateModel(
            name='FinancialAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_investment', models.DecimalField(decimal_places=2, default=0, help_text='Investimento totale iniziale in €', max_digits=12, verbose_name='Investimento totale')),
                ('net_present_value', models.DecimalField(decimal_places=2, default=0, help_text='Valore attuale netto (NPV) in €', max_digits=12, verbose_name='Valore attuale netto')),
                ('internal_rate_of_return', models.DecimalField(decimal_places=2, default=0, help_text='Tasso interno di rendimento (IRR) in %', max_digits=6, verbose_name='Tasso interno di rendimento')),
                ('payback_period', models.DecimalField(decimal_places=2, default=0, help_text="Periodo di recupero dell'investimento in anni", max_digits=5, verbose_name='Periodo di recupero')),
                ('return_on_investment', models.DecimalField(decimal_places=2, default=0, help_text="Ritorno sull'investimento (ROI) in %", max_digits=6, verbose_name='ROI')),
                ('profitability_index', models.DecimalField(decimal_places=2, default=0, help_text='Indice di redditività (PI)', max_digits=6, verbose_name='Indice di redditività')),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, help_text='Ricavi totali nel periodo di investimento in €', max_digits=12, verbose_name='Ricavi totali')),
                ('total_costs', models.DecimalField(decimal_places=2, default=0, help_text='Costi totali nel periodo di investimento in €', max_digits=12, verbose_name='Costi totali')),
                ('total_profit', models.DecimalField(decimal_places=2, default=0, help_text='Profitto totale nel periodo di investimento in €', max_digits=12, verbose_name='Profitto totale')),
                ('yearly_cash_flow', models.JSONField(default=dict, help_text='Flussi di cassa annuali in formato JSON', verbose_name='Flussi di cassa annuali')),
                ('monthly_cash_flow', models.JSONField(default=dict, help_text='Flussi di cassa mensili in formato JSON (primi 24 mesi)', verbose_name='Flussi di cassa mensili')),
                ('loan_schedule', models.JSONField(default=dict, help_text='Piano di ammortamento del prestito in formato JSON', verbose_name='Piano ammortamento prestito')),
                ('failure_simulation', models.JSONField(default=dict, help_text='Simulazione di guasti e riparazioni in formato JSON', verbose_name='Simulazione guasti')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data creazione')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data aggiornamento')),
                ('charging_station', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='financial_analysis', to='projects.chargingstation', verbose_name='Stazione di ricarica')),
                ('project', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='financial_analysis', to='projects.project', verbose_name='Progetto')),
            ],
            options={
                'verbose_name': 'Analisi finanziaria',
                'verbose_name_plural': 'Analisi finanziarie',
            },
        ),
        migrations.CreateModel(
            name='FailureSimulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('failure_rate_year1', models.DecimalField(decimal_places=2, default=1.0, help_text='Probabilità di guasto nel primo anno', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Tasso guasti anno 1 (%)')),
                ('failure_rate_increase', models.DecimalField(decimal_places=2, default=5.0, help_text='Incremento percentuale annuo della probabilità di guasto', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)], verbose_name='Incremento annuo tasso guasti (%)')),
                ('minor_repair_percentage', models.DecimalField(decimal_places=2, default=70.0, help_text='Percentuale di guasti che richiedono riparazioni minori', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Percentuale riparazioni minori (%)')),
                ('major_repair_percentage', models.DecimalField(decimal_places=2, default=25.0, help_text='Percentuale di guasti che richiedono riparazioni maggiori', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Percentuale riparazioni maggiori (%)')),
                ('replacement_percentage', models.DecimalField(decimal_places=2, default=5.0, help_text='Percentuale di guasti che richiedono sostituzione totale', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Percentuale sostituzioni (%)')),
                ('minor_repair_cost_percentage', models.DecimalField(decimal_places=2, default=5.0, help_text='Costo di riparazione minore come % del costo della colonnina', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Costo riparazione minore (%)')),
                ('major_repair_cost_percentage', models.DecimalField(decimal_places=2, default=20.0, help_text='Costo di riparazione maggiore come % del costo della colonnina', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Costo riparazione maggiore (%)')),
                ('average_downtime_minor', models.PositiveIntegerField(default=2, help_text='Giorni medi di inattività per riparazione minore', verbose_name='Tempo fermo medio riparazione minore (giorni)')),
                ('average_downtime_major', models.PositiveIntegerField(default=7, help_text='Giorni medi di inattività per riparazione maggiore', verbose_name='Tempo fermo medio riparazione maggiore (giorni)')),
                ('average_downtime_replacement', models.PositiveIntegerField(default=14, help_text='Giorni medi di inattività per sostituzione', verbose_name='Tempo fermo medio sostituzione (giorni)')),
                ('simulation_results', models.JSONField(default=dict, help_text='Risultati dettagliati della simulazione di guasti in formato JSON', verbose_name='Risultati simulazione')),
                ('total_failures', models.PositiveIntegerField(default=0, verbose_name='Totale guasti simulati')),
                ('total_repair_costs', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costi totali riparazione')),
                ('total_revenue_loss', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Perdita totale ricavi')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data creazione')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data aggiornamento')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='failure_simulation', to='projects.project', verbose_name='Progetto')),
            ],
            options={
                'verbose_name': 'Simulazione Guasti',
                'verbose_name_plural': 'Simulazioni Guasti',
            },
        ),
        migrations.AddField(
            model_name='energycontract',
            name='projects',
            field=models.ManyToManyField(related_name='energy_contracts', through='projects.ProjectEnergyContract', to='projects.project', verbose_name='Progetti'),
        ),
        migrations.AddField(
            model_name='chargingstation',
            name='sub_project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.subproject', verbose_name='Sotto-Progetto'),
        ),
        migrations.AddConstraint(
            model_name='financialanalysis',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('charging_station__isnull', True), ('project__isnull', False)), models.Q(('charging_station__isnull', False), ('project__isnull', True)), _connector='OR'), name='financial_analysis_project_or_station'),
        ),
    ]
