# Generated by Django 5.0.7 on 2025-03-04 10:21

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmissionFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome')),
                ('source_type', models.CharField(choices=[('electricity_mix', 'Mix Elettrico Nazionale'), ('renewable', 'Energia Rinnovabile'), ('gasoline', 'Benzina'), ('diesel', 'Diesel'), ('natural_gas', 'Gas Naturale'), ('lpg', 'GPL'), ('hydrogen', 'Idrogeno')], default='electricity_mix', max_length=20, verbose_name='Tipo Fonte')),
                ('emission_factor', models.FloatField(help_text='Grammi di CO2 equivalenti per kWh', verbose_name='Fattore di Emissione (gCO2/kWh)')),
                ('year', models.IntegerField(verbose_name='Anno di Riferimento')),
                ('country', models.CharField(default='Italia', max_length=100, verbose_name='Paese')),
                ('source', models.CharField(blank=True, max_length=255, verbose_name='Fonte Dati')),
                ('notes', models.TextField(blank=True, verbose_name='Note')),
                ('is_default', models.BooleanField(default=False, verbose_name='Default per il tipo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data Creazione')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Ultimo Aggiornamento')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_emission_factors', to=settings.AUTH_USER_MODEL, verbose_name='Creato da')),
            ],
            options={
                'verbose_name': 'Fattore di Emissione',
                'verbose_name_plural': 'Fattori di Emissione',
                'ordering': ['-year', 'source_type'],
            },
        ),
        migrations.CreateModel(
            name='EnvironmentalAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome')),
                ('description', models.TextField(blank=True, verbose_name='Descrizione')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ID Oggetto')),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='Data Inizio')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Data Fine')),
                ('years_projection', models.PositiveIntegerField(default=10, help_text="Numero di anni per cui proiettare l'impatto", verbose_name='Anni di Proiezione')),
                ('renewable_percentage', models.FloatField(default=0, help_text='Percentuale di energia da fonti rinnovabili', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Percentuale Energia Rinnovabile')),
                ('avg_sessions_per_day', models.FloatField(default=5.0, help_text='Numero medio di sessioni di ricarica al giorno per punto di ricarica', verbose_name='Sessioni Medie Giornaliere per Punto')),
                ('avg_kwh_per_session', models.FloatField(default=15.0, help_text='Energia media erogata per sessione di ricarica', verbose_name='kWh Medi per Sessione')),
                ('utilization_rate', models.FloatField(default=50.0, help_text='Percentuale di utilizzo delle stazioni rispetto alla capacità massima', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Tasso di Utilizzo (%)')),
                ('total_energy_delivered', models.FloatField(blank=True, null=True, verbose_name='Energia Totale Erogata (MWh)')),
                ('total_co2_emissions', models.FloatField(blank=True, null=True, verbose_name='Emissioni CO2 Totali (tonnellate)')),
                ('total_co2_saved', models.FloatField(blank=True, null=True, verbose_name='CO2 Risparmiata Totale (tonnellate)')),
                ('equivalent_trees', models.PositiveIntegerField(blank=True, help_text='Numero di alberi necessari per assorbire la stessa quantità di CO2', null=True, verbose_name='Alberi Equivalenti')),
                ('equivalent_ice_km', models.FloatField(blank=True, help_text='Chilometri equivalenti non percorsi da veicoli a combustione interna', null=True, verbose_name='Km Equivalenti Veicoli ICE')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data Creazione')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Ultimo Aggiornamento')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype', verbose_name='Tipo Entità')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_environmental_analyses', to=settings.AUTH_USER_MODEL, verbose_name='Creato da')),
                ('electricity_emission_factor', models.ForeignKey(limit_choices_to={'source_type': 'electricity_mix'}, on_delete=django.db.models.deletion.PROTECT, related_name='electricity_analyses', to='environmental.emissionfactor', verbose_name='Fattore Emissione Elettricità')),
                ('fuel_emission_factor', models.ForeignKey(limit_choices_to={'source_type__in': ['gasoline', 'diesel']}, on_delete=django.db.models.deletion.PROTECT, related_name='fuel_analyses', to='environmental.emissionfactor', verbose_name='Fattore Emissione Carburante')),
            ],
            options={
                'verbose_name': 'Analisi Ambientale',
                'verbose_name_plural': 'Analisi Ambientali',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VehicleType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome')),
                ('description', models.TextField(blank=True, verbose_name='Descrizione')),
                ('avg_consumption', models.FloatField(help_text='kWh per 100 km di percorrenza', verbose_name='Consumo Medio (kWh/100km)')),
                ('avg_ice_consumption', models.FloatField(help_text='Litri per 100 km di percorrenza di un veicolo a combustione interna equivalente', verbose_name='Consumo Medio Equivalente (L/100km)')),
                ('fuel_type', models.CharField(choices=[('electricity_mix', 'Mix Elettrico Nazionale'), ('renewable', 'Energia Rinnovabile'), ('gasoline', 'Benzina'), ('diesel', 'Diesel'), ('natural_gas', 'Gas Naturale'), ('lpg', 'GPL'), ('hydrogen', 'Idrogeno')], default='gasoline', max_length=20, verbose_name='Tipo Carburante Equivalente')),
                ('battery_capacity', models.FloatField(blank=True, null=True, verbose_name='Capacità Batteria (kWh)')),
                ('avg_range', models.FloatField(blank=True, null=True, verbose_name='Autonomia Media (km)')),
                ('market_share', models.FloatField(default=0, help_text='Percentuale stimata nella flotta di veicoli elettrici', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Quota di Mercato (%)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data Creazione')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Ultimo Aggiornamento')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_vehicle_types', to=settings.AUTH_USER_MODEL, verbose_name='Creato da')),
            ],
            options={
                'verbose_name': 'Tipo Veicolo',
                'verbose_name_plural': 'Tipi Veicolo',
                'ordering': ['-market_share', 'name'],
            },
        ),
        migrations.CreateModel(
            name='YearlyEnvironmentalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(verbose_name='Anno')),
                ('energy_delivered', models.FloatField(verbose_name='Energia Erogata (MWh)')),
                ('co2_emissions', models.FloatField(verbose_name='Emissioni CO2 (tonnellate)')),
                ('co2_saved', models.FloatField(verbose_name='CO2 Risparmiata (tonnellate)')),
                ('vehicle_distribution', models.JSONField(default=dict, help_text="Distribuzione dell'utilizzo per tipo di veicolo", verbose_name='Distribuzione Veicoli')),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='yearly_data', to='environmental.environmentalanalysis', verbose_name='Analisi')),
            ],
            options={
                'verbose_name': 'Dato Ambientale Annuale',
                'verbose_name_plural': 'Dati Ambientali Annuali',
                'ordering': ['analysis', 'year'],
            },
        ),
        migrations.AddConstraint(
            model_name='emissionfactor',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('source_type', 'year', 'country', 'is_default'), name='unique_default_emission_factor'),
        ),
        migrations.AlterUniqueTogether(
            name='yearlyenvironmentaldata',
            unique_together={('analysis', 'year')},
        ),
    ]
