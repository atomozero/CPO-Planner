from django.db import models
from django.utils.translation import gettext_lazy as _
from decimal import Decimal

class Project(models.Model):
    name = models.CharField(_('Nome'), max_length=255)
    description = models.TextField(_('Descrizione'), blank=True)
    start_date = models.DateField(_('Data inizio'))
    end_date = models.DateField(_('Data fine'), null=True, blank=True)
    
    def __str__(self):
        return self.name
    
    class Meta:
        verbose_name = _('Progetto')
        verbose_name_plural = _('Progetti')


class Municipality(models.Model):
    """Comune dove verranno installate le stazioni di ricarica"""
    project = models.ForeignKey(
        Project, 
        on_delete=models.CASCADE, 
        related_name='municipalities',
        verbose_name=_('Progetto')
    )
    name = models.CharField(_('Nome comune'), max_length=255)
    province = models.CharField(_('Provincia'), max_length=100)
    population = models.PositiveIntegerField(_('Popolazione'), default=0)
    
    def __str__(self):
        return f"{self.name} ({self.province})"
    
    class Meta:
        verbose_name = _('Comune')
        verbose_name_plural = _('Comuni')


class ChargingStation(models.Model):
    """Stazione di ricarica per veicoli elettrici"""
    POWER_CHOICES = [
        ('slow', _('Lenta (fino a 7.4 kW)')),
        ('medium', _('Media (11-22 kW)')),
        ('fast', _('Veloce (43-50 kW)')),
        ('ultrafast', _('Ultra veloce (>100 kW)')),
    ]
    
    municipality = models.ForeignKey(
        Municipality, 
        on_delete=models.CASCADE, 
        related_name='charging_stations',
        verbose_name=_('Comune')
    )
    name = models.CharField(_('Nome stazione'), max_length=255)
    address = models.CharField(_('Indirizzo'), max_length=255)
    latitude = models.DecimalField(_('Latitudine'), max_digits=9, decimal_places=6, null=True, blank=True)
    longitude = models.DecimalField(_('Longitudine'), max_digits=9, decimal_places=6, null=True, blank=True)
    
    # Specifiche tecniche
    power_type = models.CharField(_('Tipo potenza'), max_length=20, choices=POWER_CHOICES, default='medium')
    charging_points = models.PositiveIntegerField(_('Punti di ricarica'), default=2)
    total_power = models.DecimalField(_('Potenza totale (kW)'), max_digits=8, decimal_places=2, default=22.0)
    
    # Costi
    station_cost = models.DecimalField(_('Costo stazione'), max_digits=10, decimal_places=2, default=0)
    installation_cost = models.DecimalField(_('Costo installazione'), max_digits=10, decimal_places=2, default=0)
    connection_cost = models.DecimalField(_('Costo connessione rete'), max_digits=10, decimal_places=2, default=0)
    design_cost = models.DecimalField(_('Costo progettazione'), max_digits=10, decimal_places=2, default=0)
    permit_cost = models.DecimalField(_('Costo permessi'), max_digits=10, decimal_places=2, default=0)
    
    # Energy supply
    energy_cost_kwh = models.DecimalField(_('Costo energia (€/kWh)'), max_digits=6, decimal_places=4, default=0.25)
    charging_price_kwh = models.DecimalField(_('Prezzo ricarica (€/kWh)'), max_digits=6, decimal_places=4, default=0.45)
    
    # Utilizzo stimato
    estimated_sessions_day = models.DecimalField(_('Sessioni stimate al giorno'), max_digits=6, decimal_places=2, default=4)
    avg_kwh_session = models.DecimalField(_('Media kWh per sessione'), max_digits=6, decimal_places=2, default=15)
    
    # Date
    installation_date = models.DateField(_('Data installazione pianificata'), null=True, blank=True)
    
    def __str__(self):
        return f"{self.name} - {self.municipality.name}"
    
    @property
    def total_cost(self):
        """Calcola il costo totale della stazione"""
        return (
            self.station_cost + 
            self.installation_cost + 
            self.connection_cost + 
            self.design_cost + 
            self.permit_cost
        )
    
    def calculate_base_revenue(self):
        """Calcola il ricavo annuale base"""
        daily_kwh = self.estimated_sessions_day * self.avg_kwh_session
        annual_kwh = daily_kwh * 365
        return annual_kwh * self.charging_price_kwh
    
    def calculate_base_energy_cost(self):
        """Calcola il costo energetico annuale base"""
        daily_kwh = self.estimated_sessions_day * self.avg_kwh_session
        annual_kwh = daily_kwh * 365
        return annual_kwh * self.energy_cost_kwh
    
    class Meta:
        verbose_name = _('Stazione di ricarica')
        verbose_name_plural = _('Stazioni di ricarica')
